import * as server from "@minecraft/server";

export class BeforePlayerSleepEvent {
    player: server.Player;
}

export class BeforePlayerSleepEventSignal implements EventSignal<BeforePlayerSleepEvent> {
    subscribe(callback: (arg: BeforePlayerSleepEvent) => void): (arg: BeforePlayerSleepEvent) => void;
    unsubscribe(callback: (arg: BeforePlayerSleepEvent) => void): void;
}

interface CommandType<T1 extends string, T2 extends 0 | 1 | 2 | 3 | 4, T3 extends any[][]> {
    id: T1;
    run(executor: target, ...commands: TupleToUnion<T3>): Promise<server.CommandResult>;
    permissionLevel(): T2;
}

export class CommandType<T1 extends string, T2 extends 0 | 1 | 2 | 3 | 4, T3 extends any[][]> implements CommandType<T1, T2, T3> {
    id: T1;
    run(executor: target, ...commands: TupleToUnion<T3>): Promise<server.CommandResult>;
    permissionLevel(): T2;
}

interface Events {
    [eventName: string]: EventSignal<any> | undefined;
}

/**
 * @description A final integer type
 */
type int = number;

interface EventSignal<T> {
    subscribe(callback: (arg: T) => void): (arg: T) => void;
    unsubscribe(callback: (arg: T) => void): void;
}

export class EventSignal<T> implements EventSignal<T> {
    static from<T>(ventSignalLike: EventSignal<T>): EventSignal<T>
    subscribe(callback: (arg: T) => void): (arg: T) => void;
    unsubscribe(callback: (arg: T) => void): void;
}

declare global {
    interface ObjectConstructor {
        stringify(o: object): string;
    }
    var Object: ObjectConstructor;
}

export class MinecraftCommandTypes {
    static alwaysday: CommandType<"alwaysday", 1, [[boolean?]]>;
    static clear: CommandType<"clear", 1, [[target?, server.ItemType?, int?, int?]]>;
    static daylock: CommandType<"daylock", 1, [[boolean?]]>;
    static op: CommandType<"op", 2, [[target]]>;
    static say: CommandType<"say", 0, [[string?]]>;
    static tellraw: CommandType<"tellraw", 0, [[target, server.IRawMessage]]>;
    static titleraw: CommandType<"titleraw", 1, [[target, TitleRawSet, server.IRawMessage]]>;
    static weather: CommandType<"weather", 1, [["clear" | "rain" | "thunder", int?], ["query"]]>;
}

export class World {
    events: Events & { [eventName in keyof server.Events]: server.Events[eventName]; };
}

export const world: World;

export type target = server.Entity | String | server.Player;

export type TitleRawSet = "actionbar" | "subtitle" | "title";

type TupleToUnion<T extends any[]> = T extends [infer F, ...infer rest] ? F | TupleToUnion<rest> : never[];
